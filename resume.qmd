---
format:
  html:
    toc: true
  resume-pdf:
    output-file: "my-resume"
    output-ext: "pdf"
  docx:
    output-file: "my-resume"
    output-ext: "docx"
metadata-files:
  - _contents.yml
---

```{python}
#| label: pysetup
from IPython.display import Markdown
import scripts.moderncv as cv
import yaml

with open("_contents.yml", "r") as f:
  contents = yaml.safe_load(f)
```

<!-- Header rendering for docx -->

::: {.content-visible when-format="docx"}

<div style="text-align: center">

[Email](mailto:{{< meta contact.email >}}) | [Website]({{< meta contact.website >}}) | [GitHub](https://github.com/{{< meta contact.github >}}) | [LinkedIn](https://www.linkedin.com/in/{{< meta contact.linkedin >}}) | [ORCID](https://orcid.org/{{< meta contact.orcid >}}) | [ResearchGate](https://www.researchgate.net/profile/{{< meta contact.researchgate >}})

</div>

:::

<!-- Rendering for website -->

::: {.content-visible when-format="html"}
::: {.column-margin .right-align}

[Email](mailto:{{< meta contact.email >}}) {{< iconify fxemoji:email >}}

[Website]({{< meta contact.website >}}) {{< iconify streamline:web >}}

[GitHub](https://github.com/{{< meta contact.github >}}) {{< iconify mdi:github >}}

[LinkedIn](https://www.linkedin.com/in/{{< meta contact.linkedin >}}) {{< iconify skill-icons:linkedin >}}

[ORCID](https://orcid.org/{{< meta contact.orcid >}}) {{< iconify la:orcid >}}

[ResearchGate](https://www.researchgate.net/profile/{{< meta contact.researchgate >}}) {{< iconify simple-icons:researchgate >}}

:::
:::

::: {.center}

<span style="color:#3873b3;"> *{{< meta summary >}}* </span>

:::

<!-- Skills-->

::: {.content-hidden unless-meta="skills.include-in-resume"}

# {{< iconify solar programming-outline >}} {{< meta skills.resume-header >}}

```{python}
#| label: skills
#| output: asis
if 'skills' in contents.keys():
    cv.mdskills(items=contents['skills']['items'], icons=False)
    display(Markdown(f'- **Soft skills:** {contents["skills"]["softskills"]}'))
```

:::

<!-- Experience -->

::: {.content-hidden unless-meta="experience.include-in-resume"}

# {{< iconify ic baseline-work >}} {{< meta experience.resume-header >}}

```{python}
#| label: experience
#| output: asis
if 'experience' in contents.keys():
    cv.mdexperience(items=contents['experience']['items'])
```

:::

<!-- Education -->

::: {.content-hidden unless-meta="education.include-in-resume"}

# {{< iconify zondicons education >}} {{< meta education.resume-header >}}
 
```{python}
#| label: education
#| output: asis
if 'education' in contents.keys():
    cv.mdeducation(items=contents['education']['items'], abbrev=True)
```

:::

<!-- Awards -->

::: {.content-hidden unless-meta="awards.include-in-resume"}

## {{< iconify hugeicons star-award-01 >}} {{< meta awards.resume-header >}}

```{python}
#| label: awards
#| output: asis
if 'awards' in contents.keys():
    cv.mdlist(items=contents['awards']['items'])
```

:::

<!-- Publications -->

::: {.content-hidden unless-meta="publications.include-in-resume"}

## {{< iconify fxemoji newspaper >}} {{< meta publications.resume-header >}}

### {{< meta publications.peer-reviewed.resume-subheader >}}

```{python}
#| label: peer-review
#| output: asis
if 'publications' in contents.keys():
    if contents['publications']['include-in-resume']:
        if 'peer-reviewed' in contents['publications'].keys():
            cv.mdlist(items=contents['publications']['peer-reviewed']['items'])
```

### {{< meta publications.proceedings.resume-subheader >}}

```{python}
#| label: proceedings
#| output: asis
if 'publications' in contents.keys():
    if 'proceedings' in contents['publications'].keys():
        cv.mdlist(items=contents['publications']['proceedings']['items'])
```

### {{< meta publications.talks.resume-subheader >}}

```{python}
#| label: techreports
#| output: asis
if 'publications' in contents.keys():
    if 'tech-reports' in contents['publications'].keys():
        cv.mdlist(items=contents['publications']['tech-reports']['items'])
```

:::